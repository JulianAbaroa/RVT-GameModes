-- DISCLAIMER: Apparently, 'get_crosshair_target()' only works when the object it's or it inherits from objects that can be damaged.

declare global.object[0]
alias player_primary_weapon = global.object[0]

declare global.object[1]
alias current_aim_target = global.object[1] -- The object that is currently aimed by the player.

declare global.object[2]
alias monitor_object = global.object[2] -- Monitor that it's attached to the attachable objects.

declare global.number[0] with network priority local = 0
alias is_player_attached = global.number[0] -- Flag: Determines if the player is attached (Zero for no, One for yes)

declare global.number[1] = 0 
alias monitor_shields_health = global.number[1]

function initialize_new_attachable()
    monitor_object = current_object.place_at_me(monitor, "monitor_obj", never_garbage_collect, 0, 0, 0, default)
    monitor_object.attach_to(current_object, -8, 0, 5, relative)
    monitor_object.object[0] = current_object -- Save the current object, inside the monitor.
    current_object.object[0] = monitor_object -- Save the monitor, inside the current object.
    current_object.timer[0] = 10
end

function handle_attachables()
    for each object with label "attachable_obj" do
        current_object.set_invincibility(0)

        if current_object.object[0] == no_object then -- If the monitor doesn't exists on this object.
            if current_object.timer[0] <= 0 then
                initialize_new_attachable()
            end    

            if is_player_attached == 0 then
                current_object.timer[0].set_rate(-100%)
            end
        end
    end
end 

function attach_player()
    current_player.biped.attach_to(current_aim_target.object[0], -10, 0, 5, relative) -- Attach player to the specified object.
    current_aim_target.delete() -- Delete the monitor.
    is_player_attached = 1
end

function detach_player()
    current_player.biped.detach() -- Execute detach
    is_player_attached = 0
end

function handle_player_attachements()
    for each player do
        if current_player.biped != no_object then
            player_primary_weapon = current_player.get_weapon(primary) -- Get the player's primary weapon.

            if player_primary_weapon.is_of_type(magnum) then -- If the primary weapon it's a magnum.
                current_aim_target = current_player.get_crosshair_target() -- Get the object the player is aiming at.

                if current_aim_target.has_forge_label("monitor_obj") then -- If the object has the specified label.
                    monitor_shields_health = current_aim_target.shields -- Get the shields health.

                    if monitor_shields_health < 80 then -- If the shields health are less than 80.
                        attach_player()
                    end
                end
            end

            if is_player_attached == 1 then
                if not player_primary_weapon.is_of_type(magnum) then -- If the players switched the weapon.
                    detach_player()
                end
            end
        end
    end
end

do -- kinda start method
    handle_attachables()
    handle_player_attachements()
end
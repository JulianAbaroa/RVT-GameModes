-- Re-organize all this gamemode.

declare global.number[0] with network priority local -- What is this used for?????????????
declare global.number[1] with network priority local -- What is this used for?????????????

declare global.number[2] with network priority low -- What is this used for??????????

declare global.number[3] with network priority local
alias is_ready = allocate global.number -- Flag: one for yes, zero for no.

declare global.number[4] with network priority local
alias temporal_number_reference = global.number[4]  -- It's doesn't seem to do anything with sense, since it's value it's always zero.

declare global.object[0] with network priority local 
alias flag_or_biped_reference = global.object[0] -- Temporal reference to any team flag or player biped.

declare global.object[1] with network priority local
alias temporal_object_reference = global.object[1] -- Temporal reference to some objects used here.

declare global.player[0] with network priority local -- The flag carrier killer.

declare global.player[1] with network priority local 
alias flag_carrier = global.player[1] -- The player who is carrying the flag.

declare global.team[0] with network priority local
alias current_team_flag_carrier = global.team[0] -- Defines what it's the current team that's carrying the flag.

declare player.number[0] with network priority low -- Flag: Determines wether the player has been initialized (zero for no, one for yes)
declare player.number[1] with network priority low -- Flag: Determines wether the player is recovering the flag (zero for no, one for yes)

declare player.timer[1] = 1 -- Used to increse the flag carry time of the flag carrier.
declare player.timer[2] = 5 -- Used to give time to load everything before the player is initialized.

declare object.number[0] with network priority low -- What is this used for??????????
declare object.number[1] with network priority low = 1 -- What is this used for??????????
declare object.number[2] with network priority local -- What is this used for??????????
declare object.number[3] with network priority local -- Flag: Determines wether the flag dropped incident have been sented.

declare object.object[0] with network priority low -- Something related to the flag objects.????????????''

declare object.player[0] with network priority low -- The flag carrier of the current flag.

declare object.timer[0] = script_option[1] -- Flag reset timer.
declare object.timer[1] = script_option[0] -- Flag return timer.

declare object.timer[2] = 3 -- Timer to allow the dropped/grabbed flag incidents to be send.

declare team.object[0] with network priority low -- This is the object reference to the team's flag stand. 
declare team.object[1] with network priority low -- This is the object reference to the team's flag.

do
   global.number[0] = 0 -- ???
end

on pregame: do
   game.symmetry = 1
   if script_option[2] == 1 then -- If one-sided it's enabled.
    game.symmetry = 0
    end
end 

-- Summary:
-- Makes sure every player is able to select a loadout.
function show_loadouts()
    if current_player.is_spartan() then 
        current_player.set_loadout_palette(spartan_tier_1)
    end

    if current_player.is_elite() then 
        current_player.set_loadout_palette(elite_tier_1)
    end
end

-- Summary:
-- Makes sure every player is able to see the objectives.
function initialize_objectives()
    if script_option[2] == 1 then -- If one-sided flag it's enabled.
        if current_player.team == team[0] then -- If the player its from red team.
            current_player.set_objective_text("Defend your flag.\r\n%n rounds.", game.round_limit) -- Shows the objective, and the rounds quantity.
            current_player.set_objective_allegiance_name("Defense") -- Shows the current role of the player team.
            current_player.set_objective_allegiance_icon(defend) -- Shows the defend icon.
        altif current_player.team == team[1] then -- If the player its from blue team.
            current_player.set_objective_text("Capture the enemy flag.\r\n%n rounds.", game.round_limit) -- Shows the objective, and the rounds quantity.
            current_player.set_objective_allegiance_name("Offense") -- Shows the current role of the player team.
            current_player.set_objective_allegiance_icon(attack) -- Shows the attack icon.
        end
    end

    if game.score_to_win != 0 then -- If the score to win it's different from zero.
        if script_option[2] == 0 or script_option[2] == 2 then -- If multi or neutral flag its selected.
            current_player.set_objective_text("Capture the flag.\r\n%n points to win.", game.score_to_win) -- Shows the objective, and the score to win.
        end
    altif game.score_to_win == 0 then -- If the score to win it's equal to zero.
        if script_option[2] == 0 or script_option[2] == 2 then -- If multi or neutral flag its enabled.
            current_player.set_objective_text("Capture the flag.") -- Shows the objective.
        end 
    end
end

-- Summary:
-- 
function initialize_players()
    -- Initialize players hud. 
    script_widget[0].set_text("Your flag must be at home to score!")
    script_widget[0].set_visibility(current_player, false)
    current_player.biped.set_waypoint_icon(none)

    -- Initialize players roles.
    current_player.timer[2].set_rate(-100%) -- Decrese the timer to initialize the player.

    if current_player.number[0] == 0 then -- If this player hasn't been initialized.
        if current_player.timer[2].is_zero() then -- If the determined time has passed.
            send_incident(ctf_game_start, current_player, no_player) -- Notify the game engine that the ctf has started for this player.
            current_player.number[0] = 1 -- Flag: The player has been initialized.

            if script_option[2] == 1 then -- If one-side flag its enabled.
                if current_player.team == team[0] then -- If the player its from red team.
                    send_incident(team_defense, current_player, no_player) -- Notify the game engine that this player is on the defense team.
                altif current_player.team == team[1] then -- If the player its from blue team.
                    send_incident(team_offense, current_player, no_player) -- Notify the game engine that this player is on the offense team.
                end
            end
        end
    end
end

function handle_cooldown_traits()
    flag_or_biped_reference = current_player.biped
    
    if flag_or_biped_reference != no_object then -- If the biped is valid.
        temporal_object_reference = no_object -- Cleaning.
        temporal_object_reference = current_player.get_weapon(primary)
            
        if not temporal_object_reference.is_of_type(flag) then -- If the biped is not holding a flag.
            if current_player.timer[0] > 0 then -- If the timer to apply cooldown traits is higher than zero.
                current_player.timer[0].set_rate(-100%) -- Decrease the timer to zero.

                if not current_player.timer[0].is_zero() then -- If the timer to apply cooldown traits is not zero.
                    current_player.apply_traits(script_traits[1]) -- Apply cooldown traits.
                end
            end
        end
    end
end

-- Summary:
-- 
function handle_players()
    for each player do
        show_loadouts()
        initialize_players()
        initialize_objectives()
        handle_cooldown_traits()
    end
end

-- Summary:
-- 
function set_flag_object()
    current_team.object[1].set_waypoint_visibility(everyone) -- Sets the current flag waypoint visible to everyone.

    if current_team.object[0] == no_object then -- If this team doesn't have referenced a flag.
        for each object with label "ctf_flag_return" do -- Foreach flag stand.
            if current_object.team == current_team then -- If the current object team is equal to the current team.
                current_team.object[0] = current_object -- The referenced team flag is the current object.
                current_object.set_waypoint_visibility(allies) -- Shows its waypoint only to the allies players.
                current_object.set_waypoint_icon(diamond) -- Defines the waypoint icon to diamond.
            end
        end
    end
end

-- Summary:
-- 
function handle_modes()
    if current_team == neutral_team or current_team.has_any_players() then
        if current_team.object[1] == no_object then -- If this team doesn't have a flag.
            if current_team.object[0] != no_object then -- If this does have a flag stand.
                is_ready = 0 
                
                if script_option[2] == 0 then -- If it's multi-flag.
                    if current_team != neutral_team then
                        is_ready = 1
                    end
                altif script_option[2] == 1 then -- If it's one-side flag.
                    if current_team == team[0] then
                        team[1].object[0].set_waypoint_visibility(everyone)
                        team[0].object[0].set_waypoint_visibility(no_one)
                        is_ready = 1
                    end
                altif script_option[2] == 2 then -- If it's neutral flag.
                    if current_team == neutral_team then
                        is_ready = 1
                    end
                end

                if is_ready == 1 then 
                    if script_option[2] == 1 or script_option[2] == 2 then -- If it's one-side or neutral flag.
                        for each object do
                            if current_object.is_of_type(flag) then 
                                current_team.object[1] = current_object -- Set this flag to the current team.
                                is_ready = 0
                            end
                        end
                    altif script_option[2] == 0 then -- If it's multi-flag.
                        for each object do
                            if current_object.is_of_type(flag) then
                                if is_ready == 1 then
                                    temporal_number_reference = 1 -- Flag finded.

                                    do
                                        flag_carrier = no_player
                                        flag_carrier = current_object.get_carrier()
                                        
                                        if flag_carrier != no_player then
                                            if flag_carrier.team == current_team then
                                                temporal_number_reference = 0 -- A player of this team is carrying a flag.
                                            end
                                        end 
                                    end

                                    for each team do
                                        if current_team.object[1] == current_object then 
                                            temporal_number_reference = 0 -- Flag finded.
                                        end
                                    end

                                    if temporal_number_reference == 1 then -- If no one is carrying the flag or the foreach works?
                                        current_team.object[1] = current_object
                                        is_ready = 0
                                    end
                                end
                            end
                        end
                    end

                    if is_ready == 1 then
                        -- Create and assing a new flag.
                        current_team.object[1] = current_team.object[0].place_at_me(flag, none, never_garbage_collect, 0, 0, 3, none)
                    end

                    flag_or_biped_reference = current_team.object[1]

                    if is_ready == 0 then 
                        flag_or_biped_reference.number[0] = 1 -- The flag was carried.
                    end

                    flag_or_biped_reference.team = current_team

                    current_team.object[1].set_pickup_permissions(enemies)
                    current_team.object[1].set_weapon_pickup_priority(high)
                    current_team.object[1].set_waypoint_icon(flag)
                    current_team.object[1].set_waypoint_priority(high)

                    flag_or_biped_reference.set_shape(cylinder, 7, 6, 3)

                    if script_option[2] == 2 then 
                        current_team.object[1].set_pickup_permissions(everyone)
                    end
                end
            end
        end
    end
end

function handle_flag_being_carried() 
    flag_or_biped_reference.player[0] = flag_carrier -- Sets the flag carrier to the flag reference.
        
    flag_carrier.timer[1].set_rate(-100%) -- Flag carrier timer decreasing.
    flag_carrier.apply_traits(script_traits[0]) -- Flag carrier traits applied.

    if flag_carrier.timer[1].is_zero() then 
        flag_carrier.script_stat[1] += 1 -- Increases the flag carry time of the flag carrier.
        flag_carrier.timer[1].reset()
    end

    flag_or_biped_reference.set_waypoint_visibility(no_one) -- Hides the flag waypoint.
    flag_carrier.biped.set_waypoint_icon(flag) -- Set a waypoint to the flag carrier biped.

    flag_or_biped_reference.number[0] = 1 -- The flag was carried.

    flag_or_biped_reference.timer[0] = script_option[1] -- Defines the reset time to the flag.
    flag_or_biped_reference.timer[1] = script_option[0] -- Defines the return time to the flag.

    flag_or_biped_reference.set_progress_bar(0, no_one) -- Enables a progress bar to the flag.

    global.number[0] = 1 -- ???

    flag_carrier.timer[0] = script_option[4] -- Defines the flag carrier cooldown.

    current_team_flag_carrier = flag_carrier.team -- Defines the team that's carrying the flag.

    -- If the flag carrier biped it's inside of the flag stand shape.
    if current_team_flag_carrier.object[0].shape_contains(flag_carrier.biped) then 
        is_ready = 1

        script_widget[0].set_visibility(flag_carrier, false)

        if script_option[3] == 1 then -- If the flag at home to score option is enabled.
            if script_option[2] == 0 then -- If it's multi-flag.
                temporal_object_reference = current_team_flag_carrier.object[1] -- Set the red team's flag as a temporal object reference.

                if temporal_object_reference.number[0] != 0 then -- If this team has not their flag at home.
                    is_ready = 0
                    script_widget[0].set_visibility(flag_carrier, true) -- Show flag must be at home message.
                end
            end
        end

        if is_ready == 1 then
            flag_carrier.score += 1 -- Add score to the flag carrier.
            flag_carrier.script_stat[0] += 1 -- Add score to the flag captures.
            current_team.object[1].delete() -- Delete the flag scored.
            send_incident(flag_scored, flag_carrier, all_players)
        end
    end
end

function handle_flag_reset()
    flag_or_biped_reference.delete()

    if script_option[2] == 2 then -- If is neutral flag.
        send_incident(flag_reset_neutral, flag_or_biped_reference.player[0], current_team)
    altif script_option[2] != 2 then -- If is multi-flag or one-side flag.
        send_incident(flag_reset, current_team, current_team)
    end
end

function handle_flag_recover()
    flag_or_biped_reference.delete()

    send_incident(flag_recovered, current_team, current_team)

    for each player do
        if current_player.number[1] == 1 then -- If this player was recovering the flag.
            if current_player.team == current_team then -- If this player team is the same as the current team.
                current_player.script_stat[2] += 1 -- Increase the flags returned in one for this player.
                current_player.number[1] = 0 -- This player is not returning a flag anymore.
            end
        end
    end
end

function handle_flag_being_dropped()
    if flag_or_biped_reference.number[0] == 1 then -- If someone carried the flag.
        flag_or_biped_reference.number[0] = 2 -- Flag: the flag it's dropped.

        if script_option[0] != 1 then -- If the flag return time it's different from one. 
            flag_or_biped_reference.set_progress_bar(1, allies) -- Sets the selected return time for the flag.
        end

        flag_or_biped_reference.set_waypoint_icon(flag)
        flag_or_biped_reference.set_waypoint_visibility(everyone)
        current_team.object[1].set_waypoint_priority(high)
    end

    flag_or_biped_reference = current_team.object[1]

    if flag_or_biped_reference != no_object then -- If a flag reference exist.
        if flag_or_biped_reference.number[0] == 2 or flag_or_biped_reference.number[0] == 3 then -- If the flag it's dropped or ???
            flag_or_biped_reference.timer[0].set_rate(-100%) -- Decrease the flag reset time.
            flag_or_biped_reference.timer[1].set_rate(100%) -- Increase the flag return time.

            for each player do
                current_player.number[1] = 0 -- ???

                if current_player.team == current_team then -- If this players belongs to the current team.
                    if flag_or_biped_reference.shape_contains(current_player.biped) then -- If the player biped is inside of the flag shape.
                        current_player.number[1] = 1 -- Flag: Player is returning the flag?

                        flag_or_biped_reference.timer[1].set_rate(-100%) -- Decrease the flag return time.

                        if script_option[0] == 1 then -- If the flag return time is setted to 'instant'.
                            flag_or_biped_reference.timer[1].set_rate(-1000%)
                        end

                        flag_or_biped_reference.set_waypoint_priority(blink)
                    end
                end 
            end

            for each object with label 5 do -- Label 5 must be the label to flag objects.
                if current_object.timer[0] < 6 then -- If the timer of the current flag is less than 6.
                    current_object.set_waypoint_priority(blink) -- Make the waypoint start blinking.
                end
            end

            if flag_or_biped_reference.is_out_of_bounds() or flag_or_biped_reference.timer[0].is_zero() then 
                handle_flag_reset()
            end

            if flag_or_biped_reference.timer[1].is_zero() then 
                handle_flag_recover()
            end
        end
    end
end

function handle_flag_drop_incident()
    flag_or_biped_reference.number[3] = 1 -- Drop incident have been sented.

    if script_option[2] == 2 then -- If is neutral flag.
        send_incident(flag_dropped_neutral, flag_or_biped_reference.player[0], current_team)
    end

    if script_option[2] != 2 then -- if is not neutral flag.
        send_incident(flag_dropped, flag_or_biped_reference.player[0], current_team)
    end

    flag_or_biped_reference.timer[2].reset()
end

function handle_flag_grabbed_incident()
    flag_or_biped_reference.number[2] = 1 -- The flag have been grabbed.

    if script_option[2] == 2 then -- If is neutral flag.
        send_incident(flag_grabbed_neutral, flag_carrier, current_team)
    end

    if script_option[2] != 2 then -- If is not neutral flag.
        send_incident(flag_grabbed, flag_carrier, current_team)
    end

    flag_or_biped_reference.timer[2].reset() -- Reset the return time, since it was just grabbed.
end

function handle_flag_states()
    flag_or_biped_reference = current_team.object[1]

    flag_carrier = no_player -- Cleaning.
    flag_carrier = flag_or_biped_reference.get_carrier()

    global.number[2] = 0 -- ???

    if flag_carrier != no_player then -- If the flag carrier exist.
        handle_flag_being_carried()
    end

    if flag_carrier == no_player then -- If the flag carrier does not exist.
        handle_flag_being_dropped()
    end

    flag_or_biped_reference = current_team.object[1] -- Set the current team's flag as the flag reference.
    temporal_object_reference = flag_or_biped_reference.player[0].biped -- Set a temporal reference to the flag carrier biped. 
    flag_carrier = flag_or_biped_reference.player[0] -- Set the flag carrier to the flag carrier variable.
    
    flag_or_biped_reference.timer[2].set_rate(-100%) -- Decrease the timer that allows to send the incident of a flag dropped/grabbed.

    if flag_or_biped_reference.timer[2].is_zero() then -- If the timer that allows these incidents be sented, entry.
        if flag_or_biped_reference.number[0] == 2 then -- If the flag is dropped.
            if flag_or_biped_reference.number[3] != 1 then -- If the flag drop incident haven't been sented.
                handle_flag_drop_incident()
            end
        end

        if flag_or_biped_reference.number[0] == 1 then -- If the flag has been carried.
            if flag_or_biped_reference.number[2] != 1 then -- If the flag haven't been grabbed.
                handle_flag_grabbed_incident()
            end
        end

        if flag_or_biped_reference.number[0] != 1 then -- If the flag wasn't been carried.
            flag_or_biped_reference.number[2] = 0 -- The flag have been dropped.
        altif flag_or_biped_reference.number[0] == 1 or flag_or_biped_reference.number[0] == 0 then -- If the flag was carried or the flag is on it's flag stand.
            flag_or_biped_reference.number[3] = 0 -- Dropped flag incident haven't been sented.
        end
    end
end

function handle_teams()
    for each team do
        handle_flag_states()
        set_flag_object()
        handle_modes()
    end
end

for each team do
    if current_team.has_any_players() then 
        flag_or_biped_reference = current_team.object[1]
        for each player do
            if flag_or_biped_reference.player[0].killer_type_is(kill) then 
                global.player[0] = flag_or_biped_reference.player[0].try_get_killer()
                send_incident(flagcarrier_kill, global.player[0], flag_or_biped_reference.player[0])
                flag_or_biped_reference.player[0] = no_player
            end
        end
    end
end

for each object with label 5 do
    if current_object.object[0] == no_object then 
        current_object.object[0] = current_object.place_at_me(hill_marker, none, never_garbage_collect | suppress_effect, 0, 0, 0, none)
        current_object.object[0].set_shape(cylinder, script_option[6], 10, 10)
        current_object.object[0].set_shape_visibility(no_one)
        current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
    end
end

for each object with label 5 do
    if script_option[2] == 1 then 
        flag_or_biped_reference = current_object
        for each player do
            if not current_player.team == flag_or_biped_reference.team and flag_or_biped_reference.object[0].shape_contains(current_player.biped) then 
                global.number[2] = 1
                flag_or_biped_reference.timer[0].set_rate(0%)
            end
        end
    end
end

for each object with label 5 do
    flag_or_biped_reference = current_object
    if not flag_or_biped_reference.player[0] == no_player then 
        for each player do
            if current_player == flag_or_biped_reference.player[0] then 
                flag_carrier = no_player
                flag_carrier = flag_or_biped_reference.get_carrier()
                if flag_carrier == no_player then 
                flag_or_biped_reference.player[0] = no_player
                end
            end
        end
    end
end

for each team do
    if current_team.has_any_players() then 
        flag_or_biped_reference = current_team.object[1]
        if not flag_or_biped_reference == no_object then 
            for each object with label "ctf_res_zone" do
                if current_object.team == current_team then 
                current_object.enable_spawn_zone(0)
                current_object.set_shape_visibility(no_one)
                current_object.set_invincibility(1)
                current_object.set_pickup_permissions(no_one)
                if flag_or_biped_reference.number[0] == 0 then 
                    current_object.enable_spawn_zone(1)
                end
                end
            end
            for each object with label "ctf_res_zone_away" do
                if current_object.team == current_team then 
                current_object.enable_spawn_zone(0)
                current_object.set_shape_visibility(no_one)
                current_object.set_invincibility(1)
                current_object.set_pickup_permissions(no_one)
                if not flag_or_biped_reference.number[0] == 0 then 
                    current_object.enable_spawn_zone(1)
                end
                end
            end
        end
    end
end

for each team do
    if current_team != neutral_team and not current_team.has_any_players() and current_team.object[1] != no_object then 
        flag_or_biped_reference = current_team.object[1]
        if flag_or_biped_reference.number[0] == 0 then 
            current_team.object[1].delete()
            current_team.object[1] = no_object
        end
    end
end

if not game.round_timer.is_zero() then 
    game.grace_period_timer = 0
end

if game.round_time_limit > 0 then 
    if not game.round_timer.is_zero() then 
        global.number[1] = 0
    end
    if game.round_timer.is_zero() then 
        if global.number[0] == 1 then 
            game.sudden_death_timer.set_rate(-100%)
            game.grace_period_timer.reset()
            if global.number[1] == 0 then 
                send_incident(sudden_death, all_players, all_players)
                global.number[1] = 1
            end
            if game.sudden_death_time > 0 and game.grace_period_timer > game.sudden_death_timer then 
                game.grace_period_timer = game.sudden_death_timer
            end
        end
        if global.number[0] == 0 then 
            game.grace_period_timer.set_rate(-100%)
            if game.grace_period_timer.is_zero() then 
                game.end_round()
            end
        end
        if game.sudden_death_timer.is_zero() then 
            game.end_round()
        end
    end
end

do
    handle_players()
    handle_teams()
end
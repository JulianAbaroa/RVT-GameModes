declare global.number[0] with network priority local
declare global.number[1] with network priority local
declare global.number[2] with network priority low
declare global.number[3] with network priority local
declare global.number[4] with network priority local
declare global.object[0] with network priority local
declare global.object[1] with network priority local
declare global.player[0] with network priority local
declare global.player[1] with network priority local
declare global.team[0] with network priority local
declare player.number[0] with network priority low
declare player.number[1] with network priority low
declare player.timer[1] = 1
declare player.timer[2] = 5
declare object.number[0] with network priority low
declare object.number[1] with network priority low = 1
declare object.number[2] with network priority local
declare object.number[3] with network priority local
declare object.object[0] with network priority low
declare object.player[0] with network priority low
declare object.timer[0] = script_option[1]
declare object.timer[1] = script_option[0]
declare object.timer[2] = 3
declare team.object[0] with network priority low
declare team.object[1] with network priority low

-- ERROR PRINCIPAL EN EL DISEÑO: Equipo perdedor puede forzar el reseteo de las banderas, para que esta aparezca en el centro.
-- POSIBLE SOLUCION: Contar un pusheo fallido unicamente cuando ocurre una recupareción de bandera. (No contar cuando ocurre el reseteo de la bandera)

-- Modificaciones

declare global.number[5] with network priority local = 0 -- Flag: Determina si el mapa es compatible con el modo de juego.
alias map_is_compatible = global.number[5]

declare global.number[6] with network priority local = 1 -- Flag: Bandera roja dentro de la base.
declare global.number[7] with network priority local = 1 -- Flag: Bandera azul dentro de la base.

declare global.number[8] with network priority local = 0 -- Contador de veces que el equipo rojo a pusheado.
declare global.number[9] with network priority local = 0 -- Contador de veces que el equipo azul a pusheado.

declare global.timer[0] = 30 -- El timer de los rojos hace que la bandera de los azules vaya al centro.
declare global.timer[1] = 30 -- El timer de los azules hace que la bandera roja vaya al centro.

if map_is_compatible == 0 then -- Si el mapa no es compatible.
   for each object with label "red_flag_center_spawn" do -- Si existe el objeto con esta label.
      map_is_compatible = 1
   end

   for each object with label "blue_flag_center_spawn" do -- Si existe el objeto con esta label.
      map_is_compatible = 1
   end

   if map_is_compatible == 0 then -- Si no se encontraron objetos con las labels anteriores.
      map_is_compatible = -1 -- El mapa se define como no compatible
   end
end

do
   if map_is_compatible == 1 then -- Si el mapa es compatible con el modo de juego.
      if global.number[8] >= 3 and team[0].score < team[1].score then -- Si los rojos han pusheado mas de 3 veces y además van perdiendo.
         global.timer[0].set_rate(-100%) -- Disminuir el timer para que la bandera de los azules vaya al centro.
      end

      if global.number[9] >= 3 and team[0].score > team[1].score then -- Si los azules han pusehado más de tres veces y además van perdiendo.
         global.timer[1].set_rate(-100%) -- Disminuir el timer para que la bandera de los rojos vaya al centro.
      end

      if global.timer[0] < 30 and global.number[8] >= 3 then -- Bandera azul apunto de irse al centro.
         script_widget[1].set_text("Your flag on mid in %n", global.timer[0]) -- Widget arriba/izquierda. (Defensores)
         script_widget[2].set_text("Enemy flag on mid in %n", global.timer[0]) -- Widget arribe/derecha. (Atacantes)

         for each player do -- Por cada jugador
            if current_player.team == team[0] then -- Mostrar a los rojos que la bandera enemiga ira al centro.
               script_widget[2].set_visibility(current_player, true)
            altif current_player.team == team[1] then -- Mostrar a los azules que su bandera ira al centro.
               script_widget[1].set_visibility(current_player, true)
            end
         end
      end

      if global.timer[1] < 30 and global.number[9] >= 3 then -- Bandera roja apunto de irse al centro.
         script_widget[1].set_text("Your flag on mid in %n", global.timer[1])
         script_widget[2].set_text("Enemy flag on mid in %n", global.timer[1])
         
         for each player do
            if current_player.team == team[0] then -- Mostrar a los rojos que su bandera ira al centro.
               script_widget[1].set_visibility(current_player, true)
            altif current_player.team == team[1] then -- Mostrar a los azules que la bandera enemiga ira al centro.
               script_widget[2].set_visibility(current_player, true)
            end
         end
      end

      if global.timer[1] >= 30 or global.timer[1] <= 0 or global.number[6] == 0 then -- Si los azules no han pusheado.
         for each player do
            if current_player.team == team[0] then -- Si el jugador actual es del equipo rojo.
               script_widget[1].set_visibility(current_player, false)
            end

            if current_player.team == team[1] then -- Si el jugador actual es del equipo azul.
               script_widget[2].set_visibility(current_player, false)
            end
         end
      end

      if global.timer[0] >= 30 or global.timer[0] <= 0 or global.number[7] == 0 then -- Si los rojos no han pusheado.
         for each player do
            if current_player.team == team[0] then
               script_widget[2].set_visibility(current_player, false) -- Widget arriba/izquierda. (Defensores)
            end

            if current_player.team == team[1] then
               script_widget[1].set_visibility(current_player, false) -- Widget arriba/derecha. (Atacantes)
            end
         end
      end
   end
end

for each team do -- Activar lógica principal.
   if map_is_compatible == 1 then
      if current_team == team[0] and team[0].score > team[1].score then -- Si es el equipo rojo.
         if global.timer[1] <= 0 and global.number[6] == 1 and global.number[9] >= 3 then -- Si se sobrepaso el tiempo del equipo azul.
            current_team.object[1].delete() 

            for each object with label "red_flag_center_spawn" do
               current_object.place_at_me(flag, none, never_garbage_collect, 0, 0, 0, none)
            end

            global.number[9] = -1 -- Reseteo del contador de pusheos para el equipo azul.
            global.timer[1].reset()
         end
      end

      if current_team == team[1] and team[0].score < team[1].score then
         if global.timer[0] <= 0 and global.number[7] == 1 and global.number[8] >= 3 then
            current_team.object[1].delete() 

            for each object with label "blue_flag_center_spawn" do
               current_object.place_at_me(flag, none, never_garbage_collect, 0, 0, 0, none)
            end

            global.number[8] = -1 -- Reseteo del contador de pusheos para el equipo rojo.
            global.timer[0].reset()
         end
      end
   end
end

-- Modificaciones

do
   global.number[0] = 0
end

on pregame: do
   game.symmetry = 1
   if script_option[2] == 1 then 
      game.symmetry = 0
   end
end

for each player do
   if current_player.is_elite() then 
      current_player.set_loadout_palette(elite_tier_1)
   end
   if not current_player.is_elite() then 
      current_player.set_loadout_palette(spartan_tier_1)
   end
end

for each player do
   current_player.timer[2].set_rate(-100%)
   if script_option[2] == 1 and current_player.team == team[1] then 
      current_player.set_objective_text("Capture the enemy flag.\r\n%n rounds.", game.round_limit)
      current_player.set_objective_allegiance_name("Offense")
      current_player.set_objective_allegiance_icon(attack)
   end
   if script_option[2] == 1 and current_player.team == team[0] then 
      current_player.set_objective_text("Defend your flag.\r\n%n rounds.", game.round_limit)
      current_player.set_objective_allegiance_name("Defense")
      current_player.set_objective_allegiance_icon(defend)
   end
   if game.score_to_win != 0 and script_option[2] == 2 or script_option[2] == 0 then 
      current_player.set_objective_text("Capture the flag.\r\n%n points to win.", game.score_to_win)
   end
   if game.score_to_win == 0 and script_option[2] == 2 or script_option[2] == 0 then 
      current_player.set_objective_text("Capture the flag.")
   end
end

for each player do
   script_widget[0].set_text("Your flag must be at home to score!")
   script_widget[0].set_visibility(current_player, false)
   if current_player.number[0] == 0 and current_player.timer[2].is_zero() then 
      send_incident(ctf_game_start, current_player, no_player)
      current_player.number[0] = 1
      if script_option[2] == 1 and current_player.team == team[1] then 
         send_incident(team_offense, current_player, no_player)
      end
      if script_option[2] == 1 and current_player.team == team[0] then 
         send_incident(team_defense, current_player, no_player)
      end
   end
end

for each team do
   if current_team.object[0] == no_object then 
      for each object with label "ctf_flag_return" do
         if current_team.object[0] == no_object and current_object.team == current_team then 
            current_team.object[0] = current_object
            current_object.set_waypoint_visibility(allies)
            current_object.set_waypoint_icon(diamond)
         end
      end
   end
end

for each team do
   current_team.object[1].set_waypoint_visibility(everyone)
   if current_team == neutral_team or current_team.has_any_players() and current_team.object[1] == no_object and not current_team.object[0] == no_object then 
      global.number[3] = 0
      if script_option[2] == 0 and not current_team == neutral_team and current_team.has_any_players() then 
         global.number[3] = 1
      end
      if script_option[2] == 1 and current_team == team[0] then 
         team[1].object[0].set_waypoint_visibility(everyone)
         team[0].object[0].set_waypoint_visibility(no_one)
         global.number[3] = 1
      end
      if script_option[2] == 2 and current_team == neutral_team then 
         global.number[3] = 1
      end
      if global.number[3] == 1 then 
         if script_option[2] == 1 or script_option[2] == 2 then 
            for each object do
               if current_object.is_of_type(flag) then 
                  current_team.object[1] = current_object
                  global.number[3] = 0
               end
            end
         end
         if script_option[2] == 0 then 
            for each object do
               if current_object.is_of_type(flag) and global.number[3] == 1 then 
                  global.number[4] = 1
                  do
                     global.player[1] = no_player
                     global.player[1] = current_object.get_carrier()
                     if not global.player[1] == no_player and global.player[1].team == current_team then 
                        global.number[4] = 0
                     end
                  end
                  for each team do
                     if current_team.object[1] == current_object then 
                        global.number[4] = 0
                     end
                  end
                  if global.number[4] == 1 then 
                     current_team.object[1] = current_object
                     global.number[3] = 0
                  end
               end
            end
         end
         if global.number[3] == 1 then 
            current_team.object[1] = current_team.object[0].place_at_me(flag, none, never_garbage_collect, 0, 0, 3, none)
         end
         global.object[0] = current_team.object[1]
         if global.number[3] == 0 then 
            global.object[0].number[0] = 1
         end
         global.object[0].team = current_team
         current_team.object[1].set_pickup_permissions(enemies)
         current_team.object[1].set_weapon_pickup_priority(high)
         current_team.object[1].set_waypoint_icon(flag)
         current_team.object[1].set_waypoint_priority(high)
         global.object[0].set_shape(cylinder, 7, 6, 3)
         if script_option[2] == 2 then 
            current_team.object[1].set_pickup_permissions(everyone)
         end
      end
   end
end

for each player do
   current_player.biped.set_waypoint_icon(none)
end

for each team do
   global.object[0] = current_team.object[1]
   global.player[1] = no_player
   global.number[2] = 0
   global.player[1] = global.object[0].get_carrier()
   if not global.player[1] == no_player then 
      global.object[0].player[0] = global.player[1]
      global.player[1].apply_traits(script_traits[0])
      global.player[1].timer[1].set_rate(-100%)
      if global.player[1].timer[1].is_zero() then 
         global.player[1].script_stat[1] += 1
         global.player[1].timer[1].reset()
      end
   end
   if not global.player[1] == no_player then -- Si la bandera contiene un jugador válido (flag-carrier)
      global.object[0].set_waypoint_visibility(no_one)
      global.player[1].biped.set_waypoint_icon(flag)
      global.object[0].number[0] = 1
      global.object[0].timer[0] = script_option[1]
      global.object[0].timer[1] = script_option[0]
      global.object[0].set_progress_bar(0, no_one)
      global.number[0] = 1
      global.player[1].timer[0] = script_option[4]
      global.team[0] = global.player[1].team

-- Modificación ¿Que condición hara que entre una sola vez?
      if map_is_compatible == 1 then
         if current_team == team[0] then
            global.number[6] = 0 -- La bandera roja esta siendo llevada
         end

         if current_team == team[1] then
            global.number[7] = 0 -- La bandera azul esta siendo llevada
         end
      end

-- Modificación

      if global.team[0].object[0].shape_contains(global.player[1].biped) then -- Si el jugador esta dentro de la shape de su propio "flag_stand"
         global.number[3] = 1
         script_widget[0].set_visibility(global.player[1], false)
         if script_option[3] == 1 and script_option[2] == 0 then 
            global.object[1] = global.team[0].object[1]
            if not global.object[1].number[0] == 0 then 
               global.number[3] = 0
               script_widget[0].set_visibility(global.player[1], true)
            end
         end
         if global.number[3] == 1 then -- Pase todas las validaciones y puedo efectivamente puntuar.
            global.player[1].score += 1
            global.player[1].script_stat[0] += 1

-- Modificación (Resetear el timer segun el equipo en cuestión)

            if map_is_compatible == 1 then
               if current_team == team[0] then -- Si es el equipo rojo.
                  global.timer[1].reset() -- Se resetea el timer del equipo azul.
                  global.number[6] = 1 -- La bandera roja esta en su base.
                  global.number[9] = 0 -- El contador de pusheos del equipo azul se resetea.
               end
                  
               if current_team == team[1] then -- Si es el equipo azul.
                  global.timer[0].reset() -- Se resetea el timer del equipo rojo.
                  global.number[7] = 1 -- La bandera azul esta en su base.
                  global.number[8] = 0 -- El contador de pusheos del equipo rojo se resetea.
               end
            end
-- Modificación
            current_team.object[1].delete()
            send_incident(flag_scored, global.player[1], all_players)
         end
      end
   end
   if global.player[1] == no_player and global.object[0].number[0] == 1 then 
      global.object[0].number[0] = 2
      if script_option[0] != 1 then 
         global.object[0].set_progress_bar(1, allies)
      end
      global.object[0].set_waypoint_icon(flag)
      global.object[0].set_waypoint_visibility(everyone)
      current_team.object[1].set_waypoint_priority(high)
   end
end

for each team do
   global.object[0] = current_team.object[1]
   if not global.object[0] == no_object and global.object[0].number[0] == 2 or global.object[0].number[0] == 3 then 
      global.object[0].timer[0].set_rate(-100%)
      global.object[0].timer[1].set_rate(100%)
      for each player do
         current_player.number[1] = 0
         if current_player.team == current_team and global.object[0].shape_contains(current_player.biped) then 
            current_player.number[1] = 1
            global.object[0].timer[1].set_rate(-100%)
            if script_option[0] == 1 then 
               global.object[0].timer[1].set_rate(-1000%)
            end
            global.object[0].set_waypoint_priority(blink)
         end
      end
      for each object with label 5 do
         if current_object.timer[0] < 6 then 
            current_object.set_waypoint_priority(blink)
         end
      end
      if global.object[0].is_out_of_bounds() or global.object[0].timer[0].is_zero() then 
         global.object[0].delete()
         if script_option[2] == 2 then 
            send_incident(flag_reset_neutral, global.object[0].player[0], current_team)
         end
         if not script_option[2] == 2 then 

-- Modificación

            if map_is_compatible == 1 then
               if current_team == team[0] then -- Si es el equipo rojo.
                  global.timer[1].reset() -- Se resetea el timer del equipo azul.
                  global.number[6] = 1 -- La bandera roja esta en su base.
                  global.number[9] += 1 -- Se incrementa el contador de pusheos del equipo azul.
               end

               if current_team == team[1] then
                  global.timer[0].reset() -- Se resetea el timer del equipo rojo.
                  global.number[7] = 1 -- La bandera azul esta en su base.
                  global.number[8] += 1 -- Se incrementa el contador de pusheos del equipo rojo.
               end
            end

-- Modificación

            send_incident(flag_reset, current_team, current_team)
         end
      end
      if global.object[0].timer[1].is_zero() then 
         global.object[0].delete()

-- Modificación

         if map_is_compatible == 1 then
            if current_team == team[0] then -- Si es el equipo rojo.
               global.timer[1].reset() -- Se resetea el timer del equipo azul.
               global.number[6] = 1 -- La bandera roja esta en su base.
               global.number[9] += 1 -- Se incrementa el contador de pusheos del equipo azul.
            end

            if current_team == team[1] then -- Si es el equipo azul.
               global.timer[0].reset() -- Se resetea el timer del equipo rojo.
               global.number[7] = 1 -- La bandera azul esta en su base.
               global.number[8] += 1 -- Se incrementa el contador de pusheos del equipo rojo.
            end
         end

-- Modificación

         send_incident(flag_recovered, current_team, current_team)
         for each player do
            if current_player.number[1] == 1 and current_player.team == current_team then 
               current_player.script_stat[2] += 1
               current_player.number[1] = 0
            end
         end
      end
   end
end

for each team do
   global.object[0] = current_team.object[1]
   global.object[1] = global.object[0].player[0].biped
   global.player[1] = global.object[0].player[0]
   global.object[0].timer[2].set_rate(-100%)
   if global.object[0].timer[2].is_zero() then 
      if global.object[0].number[0] == 2 and global.object[0].number[3] != 1 then 
         global.object[0].number[3] = 1
         if script_option[2] == 2 then 
            send_incident(flag_dropped_neutral, global.object[0].player[0], current_team)
         end
         if not script_option[2] == 2 then 
            send_incident(flag_dropped, global.object[0].player[0], current_team)
         end
         global.object[0].timer[2].reset()
      end
      if global.object[0].number[0] == 1 and global.object[0].number[2] != 1 then 
         global.object[0].number[2] = 1
         if script_option[2] == 2 then 
            send_incident(flag_grabbed_neutral, global.player[1], current_team)
         end
         if not script_option[2] == 2 then 
            send_incident(flag_grabbed, global.player[1], current_team)
         end
         global.object[0].timer[2].reset()
      end
      if global.object[0].number[0] != 1 then 
         global.object[0].number[2] = 0
      end
      if global.object[0].number[0] == 1 or global.object[0].number[0] == 0 then 
         global.object[0].number[3] = 0
      end
   end
end

for each player do
   global.object[0] = current_player.biped
   if not global.object[0] == no_object then 
      global.object[1] = no_object
      global.object[1] = current_player.get_weapon(primary)
      if not global.object[1].is_of_type(flag) and current_player.timer[0] > 0 then 
         current_player.timer[0].set_rate(-100%)
         if not current_player.timer[0].is_zero() then 
            current_player.apply_traits(script_traits[1])
         end
      end
   end
end

for each team do
   if current_team.has_any_players() then 
      global.object[0] = current_team.object[1]
      for each player do
         if global.object[0].player[0].killer_type_is(kill) then 
            global.player[0] = global.object[0].player[0].try_get_killer()
            send_incident(flagcarrier_kill, global.player[0], global.object[0].player[0])
            global.object[0].player[0] = no_player
         end
      end
   end
end

for each object with label 5 do
   if current_object.object[0] == no_object then 
      current_object.object[0] = current_object.place_at_me(hill_marker, none, never_garbage_collect | suppress_effect, 0, 0, 0, none)
      current_object.object[0].set_shape(cylinder, script_option[6], 10, 10)
      current_object.object[0].set_shape_visibility(no_one)
      current_object.object[0].attach_to(current_object, 0, 0, 0, relative)
   end
end

for each object with label 5 do
   if script_option[2] == 1 then 
      global.object[0] = current_object
      for each player do
         if not current_player.team == global.object[0].team and global.object[0].object[0].shape_contains(current_player.biped) then 
            global.number[2] = 1
            global.object[0].timer[0].set_rate(0%)
         end
      end
   end
end

for each object with label 5 do
   global.object[0] = current_object
   if not global.object[0].player[0] == no_player then 
      for each player do
         if current_player == global.object[0].player[0] then 
            global.player[1] = no_player
            global.player[1] = global.object[0].get_carrier()
            if global.player[1] == no_player then 
               global.object[0].player[0] = no_player
            end
         end
      end
   end
end

for each team do
   if current_team.has_any_players() then 
      global.object[0] = current_team.object[1]
      if not global.object[0] == no_object then 
         for each object with label "ctf_res_zone" do
            if current_object.team == current_team then 
               current_object.enable_spawn_zone(0)
               current_object.set_shape_visibility(no_one)
               current_object.set_invincibility(1)
               current_object.set_pickup_permissions(no_one)
               if global.object[0].number[0] == 0 then 
                  current_object.enable_spawn_zone(1)
               end
            end
         end
         for each object with label "ctf_res_zone_away" do
            if current_object.team == current_team then 
               current_object.enable_spawn_zone(0)
               current_object.set_shape_visibility(no_one)
               current_object.set_invincibility(1)
               current_object.set_pickup_permissions(no_one)
               if not global.object[0].number[0] == 0 then 
                  current_object.enable_spawn_zone(1)
               end
            end
         end
      end
   end
end

for each team do
   if current_team != neutral_team and not current_team.has_any_players() and current_team.object[1] != no_object then 
      global.object[0] = current_team.object[1]
      if global.object[0].number[0] == 0 then 
         current_team.object[1].delete()
         current_team.object[1] = no_object
      end
   end
end

if not game.round_timer.is_zero() then 
   game.grace_period_timer = 0
end

if game.round_time_limit > 0 then 
   if not game.round_timer.is_zero() then 
      global.number[1] = 0
   end
   if game.round_timer.is_zero() then 
      if global.number[0] == 1 then 
         game.sudden_death_timer.set_rate(-100%)
         game.grace_period_timer.reset()
         if global.number[1] == 0 then 
            send_incident(sudden_death, all_players, all_players)
            global.number[1] = 1
         end
         if game.sudden_death_time > 0 and game.grace_period_timer > game.sudden_death_timer then 
            game.grace_period_timer = game.sudden_death_timer
         end
      end
      if global.number[0] == 0 then 
         game.grace_period_timer.set_rate(-100%)
         if game.grace_period_timer.is_zero() then 
            game.end_round()
         end
      end
      if game.sudden_death_timer.is_zero() then 
         game.end_round()
      end
   end
end
declare global.object[1]
alias object_to_attach = global.object[1] -- Placeholder object used to "teleport" the player to it's position.

-- Summary:
-- Makes sure every "teleporter_spawnpoint" object has its respective "teleporter" object.
function handle_teleporters_spawnpoint()
    alias teleporter = allocate global.object -- Monitor that it's attached to the attachable objects.

    for each object with label "teleporter_spawnpoint" do
        if current_object.object[0] == no_object then -- If "teleporter" doesn't exists on this "teleporter_spawnpoint".
            current_object.timer[0].set_rate(100%) -- Starts the timer to spawn the "teleporter" again.
            
            if current_object.timer[0] >= 3 then
                teleporter = current_object.place_at_me(monitor, "teleporter", never_garbage_collect, 0, 0, 0, default)
                current_object.object[0] = teleporter -- Save the "teleporter", inside the "teleporter_spawnpoint".
                current_object.timer[0].set_rate(0%) -- Stops the timer to spawn the "teleporter" again.
                current_object.timer[0] = 0 -- Sets the timer value to zero.
            end
        end
    end
end 

-- Summary:
-- Makes sure every monitor has its health low enough to be destroyable with a single shot.
function handle_monitors_health()
    alias monitor_state = allocate global.number

    for each object with label "teleporter" do
        monitor_state = current_object.shields
        if monitor_state > 0 then
            current_object.shields = 0
        end

        monitor_state = current_object.health
        if monitor_state > 10 then
            current_object.health = 10
        end
    end
end

-- Summary:
-- Makes sure every player its teleported if has destroyed a monitor,
-- adding a delay to the detach, allowing the teleport its valid for the server. 
function handle_players_teleportation()
    alias ticks_delay = allocate global.number
    ticks_delay = 20

    for each player do
        if current_player.object[0] != no_object then -- If the player detroyed a monitor.
            object_to_attach = current_player.object[0]
            current_player.biped.attach_to(object_to_attach, 0, 0, 0, relative) -- Attach player to the monitor previous position.
            current_player.number[0] = 1 -- Flag: Player has been teleported.
        end
        
        if current_player.number[0] == 1 then -- If the player has been teleported.
            current_player.number[1] += 1 -- Every single tick, this number increases by one.
            
            if current_player.number[1] >= ticks_delay then -- If the player has been attached for 20 or more ticks.
                current_player.biped.detach()
                object_to_attach.delete()
                
                current_player.object[0] = no_object -- Cleaning.
                current_player.number[0] = 0 -- The player has not been teleported.
                current_player.number[1] = 0 -- The ticks counter is reseted.
            end
        end
    end
end

do
    handle_teleporters_spawnpoint()
    handle_players_teleportation()
    handle_monitors_health()
end

on object death: do
    if killed_object.has_forge_label("teleporter") then -- If the object destroyed has the "teleporter" label.
        object_to_attach = killed_object.place_at_me(hill_marker, "object_to_attach", never_garbage_collect, 0, 0, 0, none) -- Create the object where the player it's going to attach/teleport.
        killer_player.object[0] = object_to_attach -- Assign the spawned object directly to the player.
        object_to_attach = no_object -- Cleaning.
    end
end